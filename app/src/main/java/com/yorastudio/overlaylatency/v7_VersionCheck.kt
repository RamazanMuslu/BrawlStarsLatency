package com.yorastudio.overlaylatency

import android.content.Context
import android.content.pm.PackageManager
import android.graphics.Color
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.transition.Visibility
import com.google.gson.annotations.SerializedName
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.GET
import android.content.Intent
import android.net.Uri

// **********************************************
// üî• JSON VERSƒ∞YON KONTROL√ú ƒ∞√áƒ∞N YENƒ∞ SINIFLAR
// **********************************************

// 1. GitHub'daki versions.json dosyasƒ±nƒ±n yapƒ±sƒ±
// √ñrn: {"latest_version_code": 102, "latest_version_name": "6.40.1", "update_url": "..."}
data class RemoteVersionInfo(
    @SerializedName("latest_version_code")
    val latestVersionCode: Int, // Int olarak √ßekip direkt kar≈üƒ±la≈ütƒ±racaƒüƒ±z
    @SerializedName("latest_version_name")
    val latestVersionName: String,
    @SerializedName("update_url")
    val updateUrl: String
)

// 2. GitHub Raw Content Servis Aray√ºz√º (Interface)
interface RawJsonService {
    // GitHub Raw URL'in BASE_URL'den sonraki yolu:
    // BASE_URL = https://raw.githubusercontent.com/
    // Tam URL: https://raw.githubusercontent.com/RamazanMuslu/BrawlStarsLatency/main/versions.json
    @GET("RamazanMuslu/BrawlStarsLatency/main/versions.json")
    suspend fun getRemoteVersionInfo(): RemoteVersionInfo
}

// 3. Retrofit ƒ∞stemcisi
object RetrofitClient {
    // Raw content URL'in tabanƒ±
    private const val BASE_URL = "https://raw.githubusercontent.com/"

    private val retrofit: Retrofit by lazy {
        Retrofit.Builder()
            .baseUrl(BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
    }

    // Servis √∂rneƒüi
    val rawJsonService: RawJsonService by lazy {
        retrofit.create(RawJsonService::class.java)
    }
}

// **********************************************
// üî• ANA AKTƒ∞Vƒ∞TE KODU
// **********************************************

class v7_VersionCheck : AppCompatActivity() {

    // Kullanƒ±lacak XML elementleri
    private lateinit var tvVersionInfo: TextView
    private lateinit var tvUpdateStatus: TextView // G√ºncelleme durumu i√ßin yeni TextView (XML'e eklenmeli!)
    private lateinit var btnDownloadUpdate: Button

    // SharedPreferences'ƒ± kolayca eri≈ümek i√ßin lazy init ile tanƒ±mlƒ±yoruz
    private val sharedPreferences by lazy {
        getSharedPreferences("OverlayPrefs", MODE_PRIVATE)
    }

    override fun attachBaseContext(newBase: Context?) {
        super.attachBaseContext(LocaleHelper.onAttach(newBase!!))
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_updatechecker_version7) // Kendi layout'umuzu y√ºkl√ºyoruz

        // XML'deki elemanlarƒ± kodda buluyoruz
        val btnAboutApp_BackMain: ImageView = findViewById(R.id.btn_back_from_update)
        val btnCheck: Button = findViewById(R.id.btn_check_for_updates_large)
        tvVersionInfo = findViewById(R.id.text_detail_status_message)
        btnDownloadUpdate = findViewById(R.id.btn_update_app)
        tvUpdateStatus = findViewById(R.id.tv_update_status)

        loadAndApplySettings()
        // üî• Versiyon kontrol√ºn√º burada ba≈ülatƒ±yoruz
        checkAppVersion()

        btnCheck.setOnClickListener {
            checkAppVersion()
        }

        btnAboutApp_BackMain.setOnClickListener{
            finish()
        }
    }

    private fun loadAndApplySettings() {
        val currentVersionName = getAppVersionDetails(this).versionName
        // Uygulamanƒ±n g√ºncel s√ºr√ºm√ºn√º g√∂ster
        tvVersionInfo.text = getString(R.string.v7_about_app_version) + " " + currentVersionName
        // Kontrol ba≈ülamadan √∂nce bekleme mesajƒ±
        // (R.string.v7_checking_update gibi bir string tanƒ±mla)
        tvUpdateStatus.text = "G√ºncelleme Kontrol Ediliyor..."
    }

    /**
     * GitHub'daki JSON dosyasƒ±ndan en son versionCode'u √ßeker ve uygulamanƒ±nkiyle kar≈üƒ±la≈ütƒ±rƒ±r.
     */
    private fun checkAppVersion() {
        btnDownloadUpdate.visibility = Button.GONE
        val currentVersionCode = getAppVersionDetails(this).versionCode
        val currentVersionName = getAppVersionDetails(this).versionName

        // Aƒü i≈ülemleri i√ßin arka plan thread'i (UI donmasƒ±n diye)
        CoroutineScope(Dispatchers.IO).launch {
            try {
                // JSON dosyasƒ±nƒ± √ßek
                val remoteInfo = RetrofitClient.rawJsonService.getRemoteVersionInfo()
                val remoteVersionCode = remoteInfo.latestVersionCode
                val remoteVersionName = remoteInfo.latestVersionName

                Log.d("VersionCheck", "Remote Code: $remoteVersionCode, Current Code: $currentVersionCode")

                withContext(Dispatchers.Main) {
                    if (remoteVersionCode > currentVersionCode) {
                        tvUpdateStatus.setTextColor(Color.parseColor("#FFC107")) // Yeni S√ºr√ºm Rengi
                        tvUpdateStatus.text = getString(R.string.v7_check_for_update_new_version_avalible) + "($remoteVersionName)"
                        btnDownloadUpdate.visibility = Button.VISIBLE
                        btnDownloadUpdate.setOnClickListener {
                            val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(remoteVersionName))
                        }


                    } else if (remoteVersionCode == currentVersionCode) {
                        tvUpdateStatus.setTextColor(Color.parseColor("#4CAF50")) // G√ºncel S√ºr√ºm Rengi
                        tvUpdateStatus.text = getString(R.string.v7_check_for_update_up_to_date)
                    }
                    else if (remoteVersionCode < currentVersionCode) {
                        tvUpdateStatus.setTextColor(Color.parseColor("#4CAF50")) // G√ºncel S√ºr√ºm Rengi
                        tvUpdateStatus.text = getString(R.string.v7_check_for_update_development_environment_enable)
                    }
                    else {
                        tvUpdateStatus.setTextColor(Color.RED) // G√ºncel S√ºr√ºm Rengi
                        tvUpdateStatus.text = getString(R.string.v7_check_for_update_an_error_occurred)
                    }
                }
            } catch (e: Exception) {
                // Hata yakalama
                Log.e("VersionCheck", "JSON dosyasƒ±ndan s√ºr√ºm √ßekilemedi: ${e.message}")
                withContext(Dispatchers.Main) {
                    tvUpdateStatus.setTextColor(Color.RED)
                    tvUpdateStatus.text = getString(R.string.v7_check_for_update_an_error_occurred)
                }
            }
        }
    }

    fun getAppVersionDetails(context: Context): AppVersionInfo {
        try {
            val packageName = context.packageName
            val packageInfo = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                context.packageManager.getPackageInfo(packageName, PackageManager.PackageInfoFlags.of(0L))
            } else {
                @Suppress("DEPRECATION")
                context.packageManager.getPackageInfo(packageName, 0)
            }
            val versionCode: Int
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                versionCode = packageInfo.longVersionCode.toInt()
            } else {
                @Suppress("DEPRECATION")
                versionCode = packageInfo.versionCode
            }
            val versionName = packageInfo.versionName.toString()
            // AppVersionInfo'nun var olduƒüunu varsayarak d√∂nd√ºr√ºyoruz.
            return AppVersionInfo(versionCode, versionName)
        } catch (e: PackageManager.NameNotFoundException) {
            e.printStackTrace()
            // AppVersionInfo'nun var olduƒüunu varsayarak d√∂nd√ºr√ºyoruz.
            return AppVersionInfo(0, "Unknown")
        }
    }
}